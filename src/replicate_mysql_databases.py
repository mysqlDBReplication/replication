#!/usr/bin/env python
""" This script is used to replicate the databases based on the log files
generated by the databases.
Assumptions: Database logging is enabled all the time.
"""

# Global variables defined to return success or failure
SUCCESS = True
FAILURE = False

import MySQLdb
import os
import commands
LOCATION = os.path.dirname(os.path.abspath(__file__))
os.chdir(LOCATION)
commands.getstatusoutput("make clean")
commands.getstatusoutput("make")
import config_pb2
import detect_changes
import general_utils


class replicateDatabases(object):
    """This class is used to replicate the databases."""

    def __init__(self, lookup_file):
        """This function initializes the variables required by the class.
        Args: 
            lookup_file: File in which previous replication details are stored
        """
        self.lookup_file = lookup_file
        self.replication_details = config_pb2.previousReplicationDetails()
        self.temp_db_binlog_file = 'temp_bindb_log'
        self.temp_db_textlog_file = 'temp_textdb_log'

    def check_changes(self):
        """ This function check for changes in the log file.
        Args:
            self: Instance of the class.
        Returns:
            True on success else false.
            'Yes' on changes else 'No'
        Raises:
            NA.
        """
        check_for_change = detect_changes.detectChanges(self.lookup_file)
        return check_for_change.check_changes()

    def merge_config_protobuf(self):
        """This function is used to merge the config details from the lookup
        file with replication_details variable.
        Args:
            self: Instance of the class.
        Returns:
            True on success else False.
        Raises:
            NA.
        """
        if not general_utils.merge_proto(self.lookup_file,
                                         self.replication_details, 'Text'):
            logging.error("Merging of proto file failed")
            return FAILURE
        return SUCCESS

    def convert_logbin_to_logtext(self):
        """This function is used to convert the binary log file to text file.
        Args:
            self: Instance of the class.
        Returns:
            True on success else False.
        Raises:
            NA.
        """
        command = "".join(['mysqlbinlog ', self.temp_db_binlog_file, ' >> ',
                           self.temp_db_textlog_file])
        status, ret = general_utils.execute_command(command)
        if not status:
            logging.error("Conversion of mysql bin log file to text failed.")
            return FAILURE
        return SUCCESS

    def load_textfile_to_database(self):
        """This function is used to load the text log file data to the database.
        Args:
            self: Instance of the class.
        Returns:
            True on success else False.
        Raises:
            NA.
        """
        db = MySQLdb.connect(host="localhost", user="root", passwd="root",
                             db="asterisk")
        # TODO(praneeth): Make the credentials not accesible.
        status, file_content = general_utils.\
            read_file_contents(self.temp_db_textlog_file)
        

